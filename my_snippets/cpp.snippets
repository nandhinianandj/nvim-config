snippet bare "barebone code template"
#include <iostream>
#include <vector>
#include <string>

using std::cout;
using std::endl;
using std::vector;
using std::string;


int main()
{

}
endsnippet

snippet icd "#include directive" b
#include <$1>
$0
endsnippet

snippet plist "print vector" w
void printList(vector<int>& arr, const string& desc){
  cout << desc << ": ";

  for (auto it = arr.begin(); it != arr.end(); it++){
    cout << *it << ((it != arr.end()-1) ? ' ' : '\n');
  }
}
endsnippet

snippet pmat "print list of list" w
void printMat(const vector<vector<int>>& mat, const string& desc){
  cout << desc << ": " << endl;

  for (auto it1 = mat.begin(); it1 != mat.end(); it1++){
    auto cur_vec = *it1;
    for (auto it2 = cur_vec.begin(); it2 != cur_vec.end(); it2++){
      cout << *it2 << ((it2 != cur_vec.end()-1) ? ' ' : '\n');
    }
  }
}
endsnippet

snippet cout "print a variable" w
cout << "$1: " << $2 << endl;
endsnippet
